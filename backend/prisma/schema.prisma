// Prisma Schema for Todo App
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  todos     Todo[]
  comments  Comment[]
  categories Category[]
  teams     TeamMember[]
  ownedTeams Team[] @relation("TeamOwner")

  @@map("users")
}

model Todo {
  id          String   @id @default(cuid())
  title       String
  description String?
  priority    String   @default("MEDIUM")
  status      String   @default("TODO")
  dueDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories  TodoCategory[]
  subtasks    Subtask[]
  comments    Comment[]

  @@map("todos")
}

model Category {
  id        String   @id @default(cuid())
  name      String
  color     String   @default("#3B82F6")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  todos     TodoCategory[]

  @@map("categories")
}

model TodoCategory {
  todoId     String
  categoryId String
  todo       Todo     @relation(fields: [todoId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([todoId, categoryId])
  @@map("todo_categories")
}

model Subtask {
  id        String   @id @default(cuid())
  title     String
  completed Boolean  @default(false)
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  todoId    String
  todo      Todo   @relation(fields: [todoId], references: [id], onDelete: Cascade)

  @@map("subtasks")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  todoId    String
  todo      Todo   @relation(fields: [todoId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  ownerId     String
  owner       User     @relation("TeamOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members     TeamMember[]

  @@map("teams")
}

model TeamMember {
  id        String   @id @default(cuid())
  role      String   @default("MEMBER")
  joinedAt  DateTime @default(now())

  // Relations
  teamId    String
  team      Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  userId    String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@map("team_members")
}
